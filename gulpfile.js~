/*!
 * gulp
 * $ npm install gulp-ruby-sass gulp-autoprefixer gulp-minify-css gulp-jshint gulp-concat gulp-uglify gulp-imagemin gulp-notify gulp-rename gulp-livereload gulp-cache del --save-dev
 */
 
// Load plugins
var gulp = require('gulp'),
    sass = require('gulp-ruby-sass'),
    autoprefixer = require('gulp-autoprefixer'),
    minifycss = require('gulp-minify-css'),
    jshint = require('gulp-jshint'),
    uglify = require('gulp-uglify'),
    rename = require('gulp-rename'),
    concat = require('gulp-concat'),
    notify = require('gulp-notify'),
    livereload = require('gulp-livereload'),
    del = require('del');

require('./tasks/browserify');

 
// Styles
gulp.task('styles', function() {
  return gulp.src('src/styles/main.scss')
      .pipe(sass({ style: 'expanded', "sourcemap=none":true })).on('error', errorHandler)
      .pipe(autoprefixer({
          browsers: ['last 2 version'],
          cascade: false
      })).on('error', errorHandler)
      .pipe(gulp.dest('dist/styles')).on('error', errorHandler)
      .pipe(rename({ suffix: '.min' })).on('error', errorHandler)
      .pipe(minifycss()).on('error', errorHandler)
      .pipe(gulp.dest('dist/styles')).on('error', errorHandler)
      .pipe(notify({ message: 'Styles task complete' }));
});
 
// Scripts
gulp.task('scripts', function() {
  return gulp.src('src/scripts/**/*.js')
    .pipe(jshint('.jshintrc')).on('error', errorHandler)
    .pipe(jshint.reporter('default'))
    .pipe(concat('main.js'))
    .pipe(gulp.dest('dist/scripts'))
    .pipe(rename({ suffix: '.min' }))
    .pipe(uglify())
    .pipe(gulp.dest('dist/scripts'))
    .pipe(notify({ message: 'Scripts task complete' }));
});
 

// Clean
gulp.task('clean', function(cb) {
    del(['dist/assets/css', 'dist/assets/js', 'dist/assets/img'], cb)
});
 
// Default task
gulp.task('default', ['clean'], function() {
    gulp.start('styles', 'scripts', 'watch', 'browserify');
});
 
// Watch
gulp.task('watch', function() {
 
  // Watch .scss files
  gulp.watch('src/styles/**/*.scss', ['styles'])
 
  // Watch .js files
  gulp.watch('src/scripts/**/*.js', ['scripts'])
 
  // Create LiveReload server
  livereload.listen();

  // Watch any files in dist/, reload on change
  gulp.watch(['dist/**']).on('change', livereload.changed).on('error', errorHandler);
 
});

function errorHandler (error) {
    console.log(error.toString());
    this.emit('end');
}
